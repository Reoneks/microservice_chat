// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rooms.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rooms service

func NewRoomsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rooms service

type RoomsService interface {
	GetRoom(ctx context.Context, in *RoomID, opts ...client.CallOption) (*RoomStructResponse, error)
	GetAllRooms(ctx context.Context, in *GetAllRoomsRequest, opts ...client.CallOption) (*RoomStructResponse, error)
	CreateRoom(ctx context.Context, in *RoomStruct, opts ...client.CallOption) (*RoomStructResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Status, error)
	UpdateRoom(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*RoomStructResponse, error)
	AddUsers(ctx context.Context, in *AddUsersRequest, opts ...client.CallOption) (*Status, error)
	DeleteUsers(ctx context.Context, in *AddUsersRequest, opts ...client.CallOption) (*Status, error)
}

type roomsService struct {
	c    client.Client
	name string
}

func NewRoomsService(name string, c client.Client) RoomsService {
	return &roomsService{
		c:    c,
		name: name,
	}
}

func (c *roomsService) GetRoom(ctx context.Context, in *RoomID, opts ...client.CallOption) (*RoomStructResponse, error) {
	req := c.c.NewRequest(c.name, "Rooms.GetRoom", in)
	out := new(RoomStructResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) GetAllRooms(ctx context.Context, in *GetAllRoomsRequest, opts ...client.CallOption) (*RoomStructResponse, error) {
	req := c.c.NewRequest(c.name, "Rooms.GetAllRooms", in)
	out := new(RoomStructResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) CreateRoom(ctx context.Context, in *RoomStruct, opts ...client.CallOption) (*RoomStructResponse, error) {
	req := c.c.NewRequest(c.name, "Rooms.CreateRoom", in)
	out := new(RoomStructResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) DeleteRoom(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Rooms.DeleteRoom", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) UpdateRoom(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*RoomStructResponse, error) {
	req := c.c.NewRequest(c.name, "Rooms.UpdateRoom", in)
	out := new(RoomStructResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) AddUsers(ctx context.Context, in *AddUsersRequest, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Rooms.AddUsers", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) DeleteUsers(ctx context.Context, in *AddUsersRequest, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Rooms.DeleteUsers", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rooms service

type RoomsHandler interface {
	GetRoom(context.Context, *RoomID, *RoomStructResponse) error
	GetAllRooms(context.Context, *GetAllRoomsRequest, *RoomStructResponse) error
	CreateRoom(context.Context, *RoomStruct, *RoomStructResponse) error
	DeleteRoom(context.Context, *DeleteRequest, *Status) error
	UpdateRoom(context.Context, *UpdateRequest, *RoomStructResponse) error
	AddUsers(context.Context, *AddUsersRequest, *Status) error
	DeleteUsers(context.Context, *AddUsersRequest, *Status) error
}

func RegisterRoomsHandler(s server.Server, hdlr RoomsHandler, opts ...server.HandlerOption) error {
	type rooms interface {
		GetRoom(ctx context.Context, in *RoomID, out *RoomStructResponse) error
		GetAllRooms(ctx context.Context, in *GetAllRoomsRequest, out *RoomStructResponse) error
		CreateRoom(ctx context.Context, in *RoomStruct, out *RoomStructResponse) error
		DeleteRoom(ctx context.Context, in *DeleteRequest, out *Status) error
		UpdateRoom(ctx context.Context, in *UpdateRequest, out *RoomStructResponse) error
		AddUsers(ctx context.Context, in *AddUsersRequest, out *Status) error
		DeleteUsers(ctx context.Context, in *AddUsersRequest, out *Status) error
	}
	type Rooms struct {
		rooms
	}
	h := &roomsHandler{hdlr}
	return s.Handle(s.NewHandler(&Rooms{h}, opts...))
}

type roomsHandler struct {
	RoomsHandler
}

func (h *roomsHandler) GetRoom(ctx context.Context, in *RoomID, out *RoomStructResponse) error {
	return h.RoomsHandler.GetRoom(ctx, in, out)
}

func (h *roomsHandler) GetAllRooms(ctx context.Context, in *GetAllRoomsRequest, out *RoomStructResponse) error {
	return h.RoomsHandler.GetAllRooms(ctx, in, out)
}

func (h *roomsHandler) CreateRoom(ctx context.Context, in *RoomStruct, out *RoomStructResponse) error {
	return h.RoomsHandler.CreateRoom(ctx, in, out)
}

func (h *roomsHandler) DeleteRoom(ctx context.Context, in *DeleteRequest, out *Status) error {
	return h.RoomsHandler.DeleteRoom(ctx, in, out)
}

func (h *roomsHandler) UpdateRoom(ctx context.Context, in *UpdateRequest, out *RoomStructResponse) error {
	return h.RoomsHandler.UpdateRoom(ctx, in, out)
}

func (h *roomsHandler) AddUsers(ctx context.Context, in *AddUsersRequest, out *Status) error {
	return h.RoomsHandler.AddUsers(ctx, in, out)
}

func (h *roomsHandler) DeleteUsers(ctx context.Context, in *AddUsersRequest, out *Status) error {
	return h.RoomsHandler.DeleteUsers(ctx, in, out)
}
