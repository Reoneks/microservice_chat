// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: messages.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Messages service

func NewMessagesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Messages service

type MessagesService interface {
	GetMessagesByRoom(ctx context.Context, in *MessageID, opts ...client.CallOption) (*GetMessagesByRoomResponse, error)
}

type messagesService struct {
	c    client.Client
	name string
}

func NewMessagesService(name string, c client.Client) MessagesService {
	return &messagesService{
		c:    c,
		name: name,
	}
}

func (c *messagesService) GetMessagesByRoom(ctx context.Context, in *MessageID, opts ...client.CallOption) (*GetMessagesByRoomResponse, error) {
	req := c.c.NewRequest(c.name, "Messages.GetMessagesByRoom", in)
	out := new(GetMessagesByRoomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Messages service

type MessagesHandler interface {
	GetMessagesByRoom(context.Context, *MessageID, *GetMessagesByRoomResponse) error
}

func RegisterMessagesHandler(s server.Server, hdlr MessagesHandler, opts ...server.HandlerOption) error {
	type messages interface {
		GetMessagesByRoom(ctx context.Context, in *MessageID, out *GetMessagesByRoomResponse) error
	}
	type Messages struct {
		messages
	}
	h := &messagesHandler{hdlr}
	return s.Handle(s.NewHandler(&Messages{h}, opts...))
}

type messagesHandler struct {
	MessagesHandler
}

func (h *messagesHandler) GetMessagesByRoom(ctx context.Context, in *MessageID, out *GetMessagesByRoomResponse) error {
	return h.MessagesHandler.GetMessagesByRoom(ctx, in, out)
}
