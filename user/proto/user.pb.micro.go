// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	GetUserByID(ctx context.Context, in *UserID, opts ...client.CallOption) (*UserStruct, error)
	GetUsers(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetUsersResponse, error)
	CreateUser(ctx context.Context, in *UserStruct, opts ...client.CallOption) (*UserStruct, error)
	UpdateUser(ctx context.Context, in *UserStruct, opts ...client.CallOption) (*UserStruct, error)
	DeleteUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*DeleteUserResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUserByID(ctx context.Context, in *UserID, opts ...client.CallOption) (*UserStruct, error) {
	req := c.c.NewRequest(c.name, "User.GetUserByID", in)
	out := new(UserStruct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUsers(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetUsersResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetUsers", in)
	out := new(GetUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *UserStruct, opts ...client.CallOption) (*UserStruct, error) {
	req := c.c.NewRequest(c.name, "User.CreateUser", in)
	out := new(UserStruct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UserStruct, opts ...client.CallOption) (*UserStruct, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUser", in)
	out := new(UserStruct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	GetUserByID(context.Context, *UserID, *UserStruct) error
	GetUsers(context.Context, *Empty, *GetUsersResponse) error
	CreateUser(context.Context, *UserStruct, *UserStruct) error
	UpdateUser(context.Context, *UserStruct, *UserStruct) error
	DeleteUser(context.Context, *UserID, *DeleteUserResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		GetUserByID(ctx context.Context, in *UserID, out *UserStruct) error
		GetUsers(ctx context.Context, in *Empty, out *GetUsersResponse) error
		CreateUser(ctx context.Context, in *UserStruct, out *UserStruct) error
		UpdateUser(ctx context.Context, in *UserStruct, out *UserStruct) error
		DeleteUser(ctx context.Context, in *UserID, out *DeleteUserResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) GetUserByID(ctx context.Context, in *UserID, out *UserStruct) error {
	return h.UserHandler.GetUserByID(ctx, in, out)
}

func (h *userHandler) GetUsers(ctx context.Context, in *Empty, out *GetUsersResponse) error {
	return h.UserHandler.GetUsers(ctx, in, out)
}

func (h *userHandler) CreateUser(ctx context.Context, in *UserStruct, out *UserStruct) error {
	return h.UserHandler.CreateUser(ctx, in, out)
}

func (h *userHandler) UpdateUser(ctx context.Context, in *UserStruct, out *UserStruct) error {
	return h.UserHandler.UpdateUser(ctx, in, out)
}

func (h *userHandler) DeleteUser(ctx context.Context, in *UserID, out *DeleteUserResponse) error {
	return h.UserHandler.DeleteUser(ctx, in, out)
}
