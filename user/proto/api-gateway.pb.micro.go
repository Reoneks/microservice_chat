// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api-gateway.proto

package proto

import (
	fmt "fmt"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ApiGateway service

func NewApiGatewayEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ApiGateway service

type ApiGatewayService interface {
	BuyProductInit(ctx context.Context, in *ApiGatewayRequest, opts ...client.CallOption) (*ApiGatewayResponse, error)
	BuyProductStart(ctx context.Context, in *TransactionID, opts ...client.CallOption) (*ApiGatewayResponse, error)
}

type apiGatewayService struct {
	c    client.Client
	name string
}

func NewApiGatewayService(name string, c client.Client) ApiGatewayService {
	return &apiGatewayService{
		c:    c,
		name: name,
	}
}

func (c *apiGatewayService) BuyProductInit(ctx context.Context, in *ApiGatewayRequest, opts ...client.CallOption) (*ApiGatewayResponse, error) {
	req := c.c.NewRequest(c.name, "ApiGateway.BuyProductInit", in)
	out := new(ApiGatewayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayService) BuyProductStart(ctx context.Context, in *TransactionID, opts ...client.CallOption) (*ApiGatewayResponse, error) {
	req := c.c.NewRequest(c.name, "ApiGateway.BuyProductStart", in)
	out := new(ApiGatewayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiGateway service

type ApiGatewayHandler interface {
	BuyProductInit(context.Context, *ApiGatewayRequest, *ApiGatewayResponse) error
	BuyProductStart(context.Context, *TransactionID, *ApiGatewayResponse) error
}

func RegisterApiGatewayHandler(s server.Server, hdlr ApiGatewayHandler, opts ...server.HandlerOption) error {
	type apiGateway interface {
		BuyProductInit(ctx context.Context, in *ApiGatewayRequest, out *ApiGatewayResponse) error
		BuyProductStart(ctx context.Context, in *TransactionID, out *ApiGatewayResponse) error
	}
	type ApiGateway struct {
		apiGateway
	}
	h := &apiGatewayHandler{hdlr}
	return s.Handle(s.NewHandler(&ApiGateway{h}, opts...))
}

type apiGatewayHandler struct {
	ApiGatewayHandler
}

func (h *apiGatewayHandler) BuyProductInit(ctx context.Context, in *ApiGatewayRequest, out *ApiGatewayResponse) error {
	return h.ApiGatewayHandler.BuyProductInit(ctx, in, out)
}

func (h *apiGatewayHandler) BuyProductStart(ctx context.Context, in *TransactionID, out *ApiGatewayResponse) error {
	return h.ApiGatewayHandler.BuyProductStart(ctx, in, out)
}
